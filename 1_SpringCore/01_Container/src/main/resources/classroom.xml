<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--如果 bean 定义中的构造器参数不存在潜在的歧义，
        那么构造器参数在 bean 定义中的定义顺序就是这些参数在 bean 被实例化时被提供给适当的构造器的顺序。-->
    <bean id="classroom1" class="org.example.pojo.Classroom">
        <!-- 使用index属性可以进行构造函数的参数索引，下标从0开始。 -->
        <constructor-arg index="0" value="11"/>
        <!-- type属性可以显式指定构造函数的参数类型 -->
        <constructor-arg value="11" type="java.lang.String"/>
        <constructor-arg value="11"/>
    </bean>

    <!-- 空构造 -->
    <bean id="classroom2" class="org.example.pojo.Classroom"/>

    <bean id="classroom3" class="org.example.pojo.Classroom">
        <!-- 使用name属性可以进行消歧 -->
        <constructor-arg name="num" value="30"/>
        <constructor-arg name="teacherName" value="小王老师"/>
        <constructor-arg name="subject" value="计算机基础"/>
    </bean>

    <!-- 使用property标签进行setter注入 -->
    <bean id="classroom4" class="org.example.pojo.Classroom">
        <property name="num" value="20"/>
        <property name="teacherName" value="张老师"/>
    </bean>

    <!-- 使用p-namespace进行更简单的配置，同样也是setter注入的原理 -->
    <bean id="classroom5" class="org.example.pojo.Classroom" p:num="10" p:subject="Java实验室"/>

    <!-- 配置一个Properties实例 -->
    <bean id="mappings"
          class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
        <!-- typed as a java.util.Properties -->
        <property name="properties">
            <value>
                jdbc.driver.className=com.mysql.jdbc.Driver
                jdbc.url=jdbc:mysql://localhost:3306/mydb
            </value>
        </property>
    </bean>

    <bean id="classroom6" class="org.example.pojo.Classroom">
        <property name="teacherName">
            <!--
                引用指定bean的id名称(字符串)，相对于传统的直接赋值，ioc容器会检查值的名称以防错
                 如果bean的作用域scope为prototype则只有在实例化bean的时候才会发现错误
                 -->
            <!-- 这里的teacherName以Setter的方式注入到容器中，值为classroom1 -->
            <idref bean="classroom1"/>
        </property>
    </bean>
</beans>
